AWSTemplateFormatVersion: '2010-09-09'
Description: 'Networking Stack'

########################################
# Define Variables
########################################
Parameters:
  Project:
    Type: String

  VpcCidr:
    Type: String
    Description: 'VPC CIDR'
  NatCidr:
    Type: String
    Description: 'VPC Nat CIDR'
  NatSubnetACidr:
    Type: String
    Description: 'NAT-a Subnet CIDR'
  NatSubnetBCidr:
    Type: String
    Description: 'NAT-b Subnet CIDR'

  PublicCidr:
    Type: String
    Description: 'VPC Public CIDR'
  PublicSubnetACidr:
    Type: String
    Description: 'Public-a Subnet CIDR'
  PublicSubnetBCidr:
    Type: String
    Description: 'Public-b Subnet CIDR'

  PrivateCidr:
    Type: String
    Description: 'VPC Private CIDR'
  PrivateSubnetACidr:
    Type: String
    Description: 'Private-a Subnet CIDR'
  PrivateSubnetBCidr:
    Type: String
    Description: 'Private-b Subnet CIDR'

  DBSubnetACidr:
    Type: String
    Description: 'DB-a Subnet CIDR'
  DBSubnetBCidr:
    Type: String
    Description: 'DB-b Subnet CIDR'

########################################
# Define resources
########################################
Resources:

########################################
# VPC settings
########################################

  VPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: !Ref VpcCidr
      EnableDnsSupport: true
      EnableDnsHostnames: true
      InstanceTenancy: default
      Tags:
      - Key: Name
        Value: !Ref "AWS::StackName"

########################################
# Internet
########################################

  InternetGateway:
    Type: 'AWS::EC2::InternetGateway'
    Properties:
      Tags:
      - Key: Name
        Value: !Sub "${Project}-internet-gateway"

  VPCGatewayAttachment:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

########################################
# Subnets
########################################

  PublicSubnetA:
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone: !Select [0, !GetAZs '']
      CidrBlock: !Ref PublicSubnetACidr
      MapPublicIpOnLaunch: true
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: !Sub "${Project}-public-subnet-a"

  PublicSubnetB:
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone: !Select [1, !GetAZs '']
      CidrBlock: !Ref PublicSubnetBCidr
      MapPublicIpOnLaunch: true
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: !Sub "${Project}-public-subnet-b"

  PrivateSubnetA:
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone: !Select [0, !GetAZs '']
      CidrBlock: !Ref PrivateSubnetACidr
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: !Sub "${Project}-private-subnet-a"

  PrivateSubnetB:
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone: !Select [1, !GetAZs '']
      CidrBlock: !Ref PrivateSubnetBCidr
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: !Sub "${Project}-private-subnet-b"

  DBSubnetA:
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone: !Select [0, !GetAZs '']
      CidrBlock: !Ref DBSubnetACidr
      MapPublicIpOnLaunch: true
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: !Sub "${Project}-db-subnet-a"

  DBSubnetB:
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone: !Select [1, !GetAZs '']
      CidrBlock: !Ref DBSubnetBCidr
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: !Sub "${Project}-db-subnet-b"

  DBSubnetGroup:
    Type: "AWS::RDS::DBSubnetGroup"
    Properties:
      DBSubnetGroupDescription: "Subnet group for RDS"
      SubnetIds:
        - !Ref "DBSubnetA"
        - !Ref "DBSubnetB"
      Tags:
        - Key: Name
          Value: !Sub "${Project}-db-subnet-group"

########################################
# NAT Gateways
########################################

  NatAEIP:
    Type: 'AWS::EC2::EIP'
    Properties:
      Domain: vpc

  NatGatewayA:
    Type: 'AWS::EC2::NatGateway'
    Properties:
      AllocationId: !GetAtt 'NatAEIP.AllocationId'
      SubnetId: !Ref PublicSubnetA
      Tags:
      - Key: Name
        Value: !Sub "${Project}-nat-gateway-a"

  NatBEIP:
    Type: 'AWS::EC2::EIP'
    Properties:
      Domain: vpc

  NatGatewayB:
    Type: 'AWS::EC2::NatGateway'
    Properties:
      AllocationId: !GetAtt 'NatBEIP.AllocationId'
      SubnetId: !Ref PublicSubnetB
      Tags:
      - Key: Name
        Value: !Sub "${Project}-nat-gateway-b"

########################################
# Route
########################################

  PublicRouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: !Sub "${Project}-public-route-table"

  PublicInternetRouteTableEntry:
    Type: 'AWS::EC2::Route'
    Properties:
      GatewayId: !Ref InternetGateway
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: '0.0.0.0/0'

  RouteTableAssociationAPublic:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PublicSubnetA
      RouteTableId: !Ref PublicRouteTable

  RouteTableAssociationBPublic:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PublicSubnetB
      RouteTableId: !Ref PublicRouteTable

  PrivateRouteTableA:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: !Sub "${Project}-private-route-table-a"

  PrivateRouteTableAEntry:
    Type: 'AWS::EC2::Route'
    Properties:
      NatGatewayId: !Ref NatGatewayA
      RouteTableId: !Ref PrivateRouteTableA
      DestinationCidrBlock: '0.0.0.0/0'

  PrivateRouteTableB:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: !Sub "${Project}-private-route-table-b"

  PrivateRouteTableBEntry:
    Type: 'AWS::EC2::Route'
    Properties:
      NatGatewayId: !Ref NatGatewayB
      RouteTableId: !Ref PrivateRouteTableB
      DestinationCidrBlock: '0.0.0.0/0'

  RouteTableAssociationAPrivate:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PrivateSubnetA
      RouteTableId: !Ref PrivateRouteTableA

  RouteTableAssociationBPrivate:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PrivateSubnetB
      RouteTableId: !Ref PrivateRouteTableB

  DBRouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: !Sub "${Project}-db-route-table"

  RouteTableAssociationBDB:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref DBSubnetB
      RouteTableId: !Ref DBRouteTable

  RouteTableAssociationADB:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref DBSubnetA
      RouteTableId: !Ref DBRouteTable

########################################
# ACL
########################################

  PublicNetworkAcl:
    Type: 'AWS::EC2::NetworkAcl'
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: !Sub "${Project}-public-acl"

  PublicASubnetNetworkAclAssociation:
    Type: 'AWS::EC2::SubnetNetworkAclAssociation'
    Properties:
      SubnetId: !Ref PublicSubnetA
      NetworkAclId: !Ref PublicNetworkAcl

  PublicBSubnetNetworkAclAssociation:
    Type: 'AWS::EC2::SubnetNetworkAclAssociation'
    Properties:
      SubnetId: !Ref PublicSubnetB
      NetworkAclId: !Ref PublicNetworkAcl

  PrivateNetworkAcl:
    Type: 'AWS::EC2::NetworkAcl'
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: !Sub "${Project}-private-acl"

  PrivateSubnetNetworkAclAssociationA:
    Type: 'AWS::EC2::SubnetNetworkAclAssociation'
    Properties:
      SubnetId: !Ref PrivateSubnetA
      NetworkAclId: !Ref PrivateNetworkAcl

  PrivateSubnetNetworkAclAssociationB:
    Type: 'AWS::EC2::SubnetNetworkAclAssociation'
    Properties:
      SubnetId: !Ref PrivateSubnetB
      NetworkAclId: !Ref PrivateNetworkAcl

########################################
# ACL Entries - Public
########################################

  PublicInboundAllowHTTP:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref PublicNetworkAcl
      RuleNumber: 1
      Protocol: "6"    #6 TCP, 4 IPv4, 17 UDP, 1 ICMP
      RuleAction: allow
      Egress: 'false'
      CidrBlock: '0.0.0.0/0'
      PortRange:
        From: '80'
        To: '80'

  PublicInboundAllowHTTPS:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref PublicNetworkAcl
      RuleNumber: 2
      Protocol: "6"
      RuleAction: allow
      Egress: 'false'
      CidrBlock: '0.0.0.0/0'
      PortRange:
        From: '443'
        To: '443'

  PublicInboundAllowUDPNTP:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref PublicNetworkAcl
      RuleNumber: 3
      Protocol: "17"
      RuleAction: allow
      Egress: 'false'
      CidrBlock: '0.0.0.0/0'
      PortRange:
        From: '123'
        To: '123'

  PublicInboundAllowTCP:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref PublicNetworkAcl
      RuleNumber: 95
      Protocol: "6"
      RuleAction: allow
      Egress: 'false'
      CidrBlock: '0.0.0.0/0'
      PortRange:
        From: '1024'
        To: '65535'

  PublicInboundAllowUDP:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref PublicNetworkAcl
      RuleNumber: 96
      Protocol: "17"
      RuleAction: allow
      Egress: 'false'
      CidrBlock: '0.0.0.0/0'
      PortRange:
        From: '1024'
        To: '65535'

  PublicInboundAllowICMP:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref PublicNetworkAcl
      RuleNumber: 98
      Protocol: 1
      Icmp:
        Code: '-1'
        Type: '-1'
      RuleAction: allow
      Egress: 'false'
      CidrBlock: '0.0.0.0/0'
      PortRange:
        From: '0'
        To: '65535'

  NetworkAclEntryInPublicAllowAll:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref PublicNetworkAcl
      RuleNumber: 99
      Protocol: "-1"
      RuleAction: allow
      Egress: 'false'
      CidrBlock: !Ref 'VpcCidr'

  NetworkAclEntryOutPublicAllowAll:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref PublicNetworkAcl
      RuleNumber: 99
      Protocol: -1
      RuleAction: allow
      Egress: true
      CidrBlock: '0.0.0.0/0'

########################################
# ACL Entries - Private
########################################

  NetworkAclEntryInPrivateAllowVPC:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref PrivateNetworkAcl
      RuleNumber: 99
      Protocol: 1
      Icmp:
        Code: '-1'
        Type: '-1'
      RuleAction: allow
      Egress: false
      CidrBlock: '0.0.0.0/0'

  PrivateInboundAllowHTTP80:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref PrivateNetworkAcl
      RuleNumber: 1
      Protocol: "6" # 1 ICMP 6 = TCP , 4 	IPv4 , 17 	UDP ,
      RuleAction: allow
      Egress: 'false'
      CidrBlock: !Ref PublicCidr
      PortRange:
        From: '80'
        To: '80'

  PrivateInboundAllowHTTP8080:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref PrivateNetworkAcl
      RuleNumber: 2
      Protocol: "6" # 1 ICMP 6 = TCP , 4 	IPv4 , 17 	UDP ,
      RuleAction: allow
      Egress: 'false'
      CidrBlock: !Ref PublicCidr
      PortRange:
        From: '8080'
        To: '8080'

  PrivateInboundAllowHTTPS:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref PrivateNetworkAcl
      RuleNumber: 3
      Protocol: "6"
      RuleAction: allow
      Egress: 'false'
      CidrBlock: !Ref PublicCidr
      PortRange:
        From: '443'
        To: '443'

  PrivateInboundAllowUDPNTP:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref PrivateNetworkAcl
      RuleNumber: 4
      Protocol: "17"
      RuleAction: allow
      Egress: 'false'
      CidrBlock: '0.0.0.0/0'
      PortRange:
        From: '123'
        To: '123'

  PrivateInboundAllowTCP:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref PrivateNetworkAcl
      RuleNumber: 95
      Protocol: "6"
      RuleAction: allow
      Egress: 'false'
      CidrBlock: '0.0.0.0/0'
      PortRange:
        From: '1024'
        To: '65535'

  PrivateInboundAllowUDP:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref PrivateNetworkAcl
      RuleNumber: 96
      Protocol: "17"
      RuleAction: allow
      Egress: 'false'
      CidrBlock: '0.0.0.0/0'
      PortRange:
        From: '1024'
        To: '65535'

  NetworkAclPrivateAllowAllPrivate:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref PrivateNetworkAcl
      RuleNumber: 98
      Protocol: "-1"
      RuleAction: allow
      Egress: 'false'
      CidrBlock: !Ref 'PrivateCidr'

  NetworkAclEntryOutPrivateAllowVPC:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref PrivateNetworkAcl
      RuleNumber: 99
      Protocol: -1
      RuleAction: allow
      Egress: true
      CidrBlock: '0.0.0.0/0'

########################################
# Export resources
########################################
Outputs:
  VPC:
    Description: 'VPC ID'
    Value: !Ref VPC
    Export:
      Name: !Sub '${Project}-vpc-id'

  VPCCidr:
    Description: 'VPC Cidr'
    Value: !Ref VpcCidr
    Export:
      Name: !Sub '${Project}-vpc-cidr'

  PublicCidr:
    Description: 'Public Subnets Cidr'
    Value: !Ref PublicCidr
    Export:
      Name: !Sub '${Project}-public-cidr'

  PrivateCidr:
    Description: 'Private Subnets Cidr'
    Value: !Ref PrivateCidr
    Export:
      Name: !Sub '${Project}-private-cidr'

  DBSubnetGroup:
    Description: 'RDS Subnet Group'
    Value: !Ref DBSubnetGroup
    Export:
      Name: !Sub '${Project}-db-subnet-group'

  PublicSubnetA:
    Description: 'Public subnet A.'
    Value: !Ref PublicSubnetA
    Export:
      Name: !Sub '${Project}-public-subnet-a'

  PrivateSubnetA:
    Description: 'Private subnet A.'
    Value: !Ref PrivateSubnetA
    Export:
      Name: !Sub '${Project}-private-subnet-a'

  PublicSubnetB:
    Description: 'Public subnet B.'
    Value: !Ref PublicSubnetB
    Export:
      Name: !Sub '${Project}-public-subnet-b'

  PrivateSubnetB:
    Description: 'Private subnet B.'
    Value: !Ref PrivateSubnetB
    Export:
      Name: !Sub '${Project}-private-subnet-b'

  NetworkAclPublic:
    Description: 'The public network ACL id.'
    Value: !Ref PublicNetworkAcl
    Export:
      Name: !Sub '${Project}-public-acl'

  NetworkAclPrivate:
    Description: 'The private network ACL id.'
    Value: !Ref PrivateNetworkAcl
    Export:
      Name: !Sub '${Project}-private-acl'
